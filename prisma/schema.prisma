generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  uuid          String    @unique @default(uuid())
  email         String?    
  fullName      String?
  age           String?
  residency     String?
  userAvatar    String?
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime?

  isVerified    Boolean   @default(false)

  phone         String?   @unique

  roles         UserRole[]

  nannyProfile  NannyProfile?
  parentProfile ParentProfile?

  otpCodes      OTPCode[]
}

model OTPCode {
  id        String   @id @default(uuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

enum UserRole {
  PARENT
  NANNY
}

model NannyProfile {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @unique

  isValidated Boolean?  @default(false)

  charts      Boolean[] @default([])
  about       String?
  education   String?
  jobs        String?
  occupancy   String?
  experience  String?
  agesBaby    Boolean[] @default([]) 
  duties      Boolean[] @default([])
  advantages  Boolean[] @default([])
  rating      String?
  question    String?

  isVisible   Boolean?  @default(false)

  typePay     String?
  pay         Int[]     @default([])

  request     Request[]

  responseId  String?   @unique
  response    Response? @relation(fields: [responseId], references: [id])

  // Files

  educationFile String?
  audioFile     String? 

  personData    String[] @default([])
}

model Request {
  id          String    @id @default(cuid())  

  nanny        NannyProfile?     @relation(fields: [nannyId], references: [id])
  nannyId      String    

  parent  String
  message String
  createdAt DateTime @default(now())
}


model ParentProfile {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      String    @unique

  subscribe   SubscribeParent?
  vacancy     Vacancy[]
}

model SubscribeParent {
  id        String         @id @default(cuid())
  parentId  String         @unique
  createdAt DateTime       @default(now())
  expiresAt DateTime
  parent    ParentProfile  @relation(fields: [parentId], references: [id])
}

model Vacancy {
  id          String         @id @default(cuid())
  parentId    String
  parent      ParentProfile  @relation(fields: [parentId], references: [id])

  createdAt   DateTime?      @default(now())

  childrens   Children[]

  charts      Boolean[]      @default([])
  description String?
  occupation  Boolean[]      @default([])
  duties      Boolean[]      @default([])
  question    String?
  request     String?
  payType     String?
  pay         String[]       @default([])
  addInfo     String?

  responses   Response[]
}

model Children {
  id       String   @id @default(cuid())
  vacId    String
  vacancy  Vacancy  @relation(fields: [vacId], references: [id])

  gender   String
  age      String
}

model Response {
  id         String         @id @default(cuid())
  vacancyId  String

  message    String?
  
  nanny      NannyProfile?  
  vacancy    Vacancy        @relation(fields: [vacancyId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  amount    Decimal
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}